version: "3.7"

services:

  # autoscaler:
  #   build: autoscaler
  #   container_name: autoscaler
  #   restart: always
  #   environment:
  #     AUTOSCALER_CHECK_PERIOD: ${AUTOSCALER_CHECK_PERIOD}
  #     CPU_ALLOCATION: ${CPU_ALLOCATION}
  #     CPU_LOWER_THRESHOLD: ${CPU_LOWER_THRESHOLD}
  #     CPU_UPPER_THRESHOLD: ${CPU_UPPER_THRESHOLD}
  #     MAX_WORKERS: ${MAX_WORKERS}
  #     MIN_WORKERS: ${MIN_WORKERS}
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock

  # mongodb:
  #   image: mongo:latest
  #   container_name: mongodb
  #   restart: always
  #   ports:
  #     - 27017:27017
  #   volumes:
  #     - ~/apps/mongo:/data/db
  #   networks:
  #     - txnetwork

  txserver:
    build: txserver
    container_name: txserver
    restart: always
    depends_on:
      - rabbitmq
    networks:
      - txnetwork
    command: sh -c "/wait && /src/main"
    environment:
      MONGODB_URI: ${MONGODB_URI}
      WAIT_HOSTS: ${WAIT_HOSTS}
      WAIT_HOSTS_TIMEOUT: ${WAIT_HOSTS_TIMEOUT}
      WAIT_SLEEP_INTERVAL: ${WAIT_SLEEP_INTERVAL}
      WAIT_HOST_CONNECT_TIMEOUT: ${WAIT_HOST_CONNECT_TIMEOUT}
      WAIT_BEFORE_HOSTS: ${WAIT_BEFORE_HOSTS}
  
  webserver:
    build: webserver
    container_name: webserver
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - rabbitmq
    networks:
      - txnetwork
    command: sh -c "/wait && /src/main"
    environment:
      WAIT_HOSTS: ${WAIT_HOSTS}
      WAIT_HOSTS_TIMEOUT: ${WAIT_HOSTS_TIMEOUT}
      WAIT_SLEEP_INTERVAL: ${WAIT_SLEEP_INTERVAL}
      WAIT_HOST_CONNECT_TIMEOUT: ${WAIT_HOST_CONNECT_TIMEOUT}
      WAIT_BEFORE_HOSTS: ${WAIT_BEFORE_HOSTS}
  
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - txnetwork


# the network's driver needs to be changed to 
# overlay when we run it on AWS in swarm mode.
networks:
  txnetwork:
    driver: bridge
